from aiogram        import types
from TwitchBotBase  import TelegramBotDispatcher, TelegramBot
from TwitchBotBase  import UsersDatabase
from TwitchBotBase  import TwitchApi

_TELEGRAM_DP_STARTMESSAGE           = "üçÑ–ü—Ä–∏–≤–µ—Ç, {}! –¢–µ–ø–µ—Ä—å —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∫–æ–≥–¥–∞ –æ–¥–∏–Ω –∏–∑ –º–æ–∏—Ö –ª—é–±–∏–º—ã—Ö —Å—Ç—Ä–∏–º–µ—Ä–æ–≤ –Ω–∞—á–Ω–µ—Ç —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é!üçÑ"
_TELEGRAM_DP_NO_BROADCASTERS        = "{}, —Ç—ã –Ω–µ –≤—ã–±—Ä–∞–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å—Ç—Ä–∏–º–µ—Ä–∞, –ø–æ–ø—Ä–æ–±—É–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É !ttv [–∏–º—è —Å—Ç—Ä–∏–º–µ—Ä–∞]!"
_TELEGRAM_DP_CURRENT_BROADCASTS     = "{}, –≤–æ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∏–º–µ—Ä–æ–≤ –∫–æ—Ç–æ—Ä—ã—Ö —Ç—ã —Å–º–æ—Ç—Ä–∏—à—å, –∏ –∏—Ö live-—Å—Ç–∞—Ç—É—Å" 
_TELEGRAM_DP_NOT_STREAMING_TEMPLATE = "‚ùå <b>{}</b>({}) - –û—Ñ—Ñ–ª–∞–π–Ω"
_TELEGRAM_DP_IS_STREAMING_TEMPLATE  = "‚úÖ <b>{}</b>({}) - –û–Ω–ª–∞–π–Ω"
_TELEGRAM_DP_BROADCASTER_REMOVED    = "<b>{}</b> –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–µ–ª–∂–∏–≤–∞–µ–º—ã—Ö"

@TelegramBotDispatcher.message_handler(commands=["start"])
async def Start(MessageIn : types.Message) -> None:
    if not UsersDatabase.UsertExists(MessageIn.from_user.id):
        UsersDatabase.AddUser(MessageIn.from_user.id)
    await MessageIn.answer(_TELEGRAM_DP_STARTMESSAGE.format(MessageIn.from_user.first_name))

@TelegramBotDispatcher.message_handler(commands=["rttv"], commands_prefix="!")
async def RemoveFollowedAccount(MessageIn : types.Message) -> None:
    BroadcasterName = MessageIn.text.split()[1]
    UsersDatabase.RemoveLinkedAccount(MessageIn.from_user.id, BroadcasterName)
    await MessageIn.answer(_TELEGRAM_DP_BROADCASTER_REMOVED.format(BroadcasterName))

@TelegramBotDispatcher.message_handler(commands=["ttv"], commands_prefix="!")
async def AddFollowedAccount(MessageIn : types.Message) -> None:
    BroadcasterName = MessageIn.text.split()[1]
    UsersDatabase.AddLinkedAccount(MessageIn.from_user.id, BroadcasterName)
    await MessageIn.answer(_TELEGRAM_DP_STARTMESSAGE.format(MessageIn.from_user.first_name))   

@TelegramBotDispatcher.message_handler(commands=['get_broadcasters'])
async def CurrentBroadCasts(MessageIn : types.Message) -> None:
    LinkedTwitchAccounts = UsersDatabase.GetLinkedTwitchAccounts(MessageIn.from_user.id)
    if(len(LinkedTwitchAccounts)):
        MessageAnswer = _TELEGRAM_DP_CURRENT_BROADCASTS.format(MessageIn.from_user.first_name)
        for TwitchAccount in LinkedTwitchAccounts:
            TwitchAccountName = TwitchAccount[2]
            if TwitchApi.CheckUserIsLive(TwitchAccountName):
                MessageAnswer += "\n" + _TELEGRAM_DP_IS_STREAMING_TEMPLATE.format(TwitchAccountName, "twitch")
            else:
                MessageAnswer += "\n" + _TELEGRAM_DP_NOT_STREAMING_TEMPLATE.format(TwitchAccountName, "twitch")
    else:
        MessageAnswer = _TELEGRAM_DP_NO_BROADCASTERS.format(MessageIn.from_user.first_name)
    await MessageIn.answer(MessageAnswer)    