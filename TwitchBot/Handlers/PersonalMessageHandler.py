from aiogram          import types, Bot
from TwitchBotBase    import TelegramBotDispatcher, TelegramBot, AddBroadcasterForm, RemBroadcasterForm, FSMContext
from TwitchBotBase    import UsersDatabase
from TwitchBotBase    import TwitchApi

import TwitchBotBase, logging

_TELEGRAM_DP_STARTMESSAGE           = "–ü—Ä–∏–≤–µ—Ç, {}! –¢–µ–ø–µ—Ä—å —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∫–æ–≥–¥–∞ –æ–¥–∏–Ω –∏–∑ –º–æ–∏—Ö –ª—é–±–∏–º—ã—Ö —Å—Ç—Ä–∏–º–µ—Ä–æ–≤ –Ω–∞—á–Ω–µ—Ç —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é!"
_TELEGRAM_DP_CHOOSE_VARIANT         = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –Ω–∏–∂–µ"
_TELEGRAM_DP_NO_BROADCASTERS        = "{}, —Ç—ã –Ω–µ –≤—ã–±—Ä–∞–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å—Ç—Ä–∏–º–µ—Ä–∞, –ø–æ–ø—Ä–æ–±—É–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É !ttv [–∏–º—è —Å—Ç—Ä–∏–º–µ—Ä–∞]!"
_TELEGRAM_DP_CURRENT_BROADCASTS     = "–í–æ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∏–º–µ—Ä–æ–≤ –∫–æ—Ç–æ—Ä—ã—Ö —Ç—ã —Å–º–æ—Ç—Ä–∏—à—å, –∏ –∏—Ö live-—Å—Ç–∞—Ç—É—Å: " 
_TELEGRAM_DP_NOT_STREAMING_TEMPLATE = "üí§ <b>{}</b>({}) - –û—Ñ—Ñ–ª–∞–π–Ω"
_TELEGRAM_DP_IS_STREAMING_TEMPLATE  = "üí¢ <b>{}</b>({}) - –û–Ω–ª–∞–π–Ω"
_TELEGRAM_DP_BROADCASTER_REMOVED    = "–°—Ç—Ä–∏–º–µ—Ä <b>{}</b> –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö"
_TELEGRAM_DP_BROADCASTER_ADDED      = "–í—ã —Ç–µ–ø–µ—Ä—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç–µ —Å—Ç—Ä–∏–º–µ—Ä–∞ <b>{}</b>"
_TELEGRAM_DP_BROADCASTER_EXISTS     = "–°—Ç—Ä–∏–º–µ—Ä {} —É–∂–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö"

_TELEGRAM_DP_BROADCASTER_TURNED_ON_1 = "<b>{}</b> –ü–æ–¥—Ä—É–±–∏–ª, —Å–∫–æ—Ä–µ–µ –∑–∞—Ö–æ–¥–∏ –Ω–∞ –µ–≥–æ —Å—Ç—Ä–∏–º!"
_TELEGRAM_DP_BROADCASTER_TURNED_ON_2 = "–ü—Å—Å... —Ç—É—Ç <b>{}</b> –Ω–∞—á–∞–ª —Å—Ç—Ä–∏–º–∏—Ç—å"
_TELEGRAM_DP_BROADCASTER_TURNED_ON_3 = "–≠—Ç–æ —á—Ç–æ —Å—Ç—Ä–∏–º <b>{}</b>?? –ó–∞—Ö–æ–¥–∏ —Å–∫–æ—Ä–µ–µ!"
_TELEGRAM_DP_BROADCASTER_TURNED_ON_4 = "<b>{}</b> –°–µ–π—á–∞—Å —Å—Ç—Ä–∏–º–∏—Ç, –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏!"
_TELEGRAM_DP_BROADCASTER_TURNED_ON_5 = "–ü–æ–¥—Ä—É–±–∫–∞ –æ—Ç <b>{}</b>!"
_TELEGRAM_DP_BROADCASTER_TURNED_ON_6 = "–ü–æ—Ç–æ–∫ –æ—Ç <b>{}</b>, –∑–∞—Ö–æ–¥–∏ —Å–∫–æ—Ä–µ–µ!"
_TELEGRAM_DP_BROADCASTER_TURNED_ON_7 = "<b>{}</b> –ü–æ–¥—Ä—É–±–∏–ª! –ù–µ –ø—Ä–æ–ø—É—Å—Ç–∏!"
_TELEGRAM_DP_BROADCASTER_TURNED_ON_8 = "<b>{}</b> –ù–∞—á–∞–ª —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é!"

TELEGRAM_DP_BROADCASTER_TURNED_ON_LIST = [
    _TELEGRAM_DP_BROADCASTER_TURNED_ON_1,
    _TELEGRAM_DP_BROADCASTER_TURNED_ON_2,
    _TELEGRAM_DP_BROADCASTER_TURNED_ON_3,
    _TELEGRAM_DP_BROADCASTER_TURNED_ON_4,
    _TELEGRAM_DP_BROADCASTER_TURNED_ON_5,
    _TELEGRAM_DP_BROADCASTER_TURNED_ON_6,
    _TELEGRAM_DP_BROADCASTER_TURNED_ON_7,
    _TELEGRAM_DP_BROADCASTER_TURNED_ON_8
]

StartFollowBroadcasterInlineButton = types.InlineKeyboardButton('–ù–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç—Ä–∏–º–µ—Ä–∞', callback_data='!add_ttv_streamer')
EndFollowBroadcasterInlineButton   = types.InlineKeyboardButton('–ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç—Ä–∏–º–µ—Ä–∞', callback_data='!remove_ttv_streamer')
WatchFollowBroadcasterInlineButton = types.InlineKeyboardButton('–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Å—Ç—Ä–∏–º–µ—Ä—ã', callback_data='!get_followed_accounts')
StartInlineKeyboard = types.InlineKeyboardMarkup()
StartInlineKeyboard.add(StartFollowBroadcasterInlineButton)
StartInlineKeyboard.add(EndFollowBroadcasterInlineButton)
StartInlineKeyboard.add(WatchFollowBroadcasterInlineButton)

@TelegramBotDispatcher.callback_query_handler(lambda c: c.data and c.data.startswith("!"))
async def process_inline_buttons_callbacks(callback_query: types.CallbackQuery):
    """
    Process querry for the inline buttons, such as remove followed broadcastrer etc.
    """
    if callback_query.data[1:] == "add_ttv_streamer":
        await AddBroadcasterForm.BroadcasterNickname.set()
        logging.info("[pm-handler] Starting 'Add broadcaster' action --> ID:" + str(callback_query.from_user.id))        
        await TelegramBot.send_message(callback_query.from_user.id, text="–í–≤–µ–¥–∏ –Ω–∏–∫ —Å—Ç—Ä–∏–º–µ—Ä–∞ –Ω–∞ —Ç–≤–∏—á–µ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å")
    if callback_query.data[1:] == "remove_ttv_streamer":
        await RemBroadcasterForm.BroadcasterNickname.set()   
        logging.info("[pm-handler] Starting 'Remove broadcaster' action --> ID:" + str(callback_query.from_user.id))             
        await TelegramBot.send_message(callback_query.from_user.id, text="–í–≤–µ–¥–∏ –Ω–∏–∫ —Å—Ç—Ä–∏–º–µ—Ä–∞ –Ω–∞ —Ç–≤–∏—á–µ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å")
    if callback_query.data[1:] == "get_followed_accounts":
        logging.info("[pm-handler] Starting 'Get followed accounts' action --> ID:" + str(callback_query.from_user.id))             
        LinkedTwitchAccounts = UsersDatabase.GetLinkedTwitchAccounts(callback_query.from_user.id)
        MessageAnswer = _TELEGRAM_DP_CURRENT_BROADCASTS
        if(len(LinkedTwitchAccounts)):
            for TwitchAccount in LinkedTwitchAccounts:
                TwitchAccountName = TwitchAccount[2]
                MessageAnswer    += "\n"
                if TwitchApi.CheckUserIsLive(TwitchAccountName):
                    MessageAnswer += "\n" + _TELEGRAM_DP_IS_STREAMING_TEMPLATE.format(TwitchAccountName, "twitch")
                else:
                    MessageAnswer += "\n" + _TELEGRAM_DP_NOT_STREAMING_TEMPLATE.format(TwitchAccountName, "twitch")
        logging.info("[pm-handler] Sending message --> " + str(callback_query.from_user.id))             
        await TelegramBot.send_message(callback_query.from_user.id, text=MessageAnswer)    

@TelegramBotDispatcher.message_handler(state=AddBroadcasterForm.BroadcasterNickname)
async def process_name(MessageIn: types.Message, state: FSMContext):
    """
    Process broadcaster name form end(means when user already sended broadcaster's name).
    *Add following
    """
    logging.info("[pm-handler] Ending 'Add broadcaster' action --> ID: " + str(MessageIn.from_user.id))             
    await state.finish()
    BroadcasterName = MessageIn.text
    LinkedTwitchAccounts = UsersDatabase.GetLinkedTwitchAccounts(MessageIn.from_user.id)
    if(len(LinkedTwitchAccounts)):
        for TwitchAccount in LinkedTwitchAccounts:
            if TwitchAccount[2] == BroadcasterName:
                logging.info("[pm-handler] Sending message --> ID: " + str(MessageIn.from_user.id))             
                await MessageIn.answer(_TELEGRAM_DP_BROADCASTER_EXISTS.format(BroadcasterName)) 
                return
    UsersDatabase.AddLinkedAccount(MessageIn.from_user.id, BroadcasterName)
    logging.info("[pm-handler] Send message --> ID: " + str(MessageIn.from_user.id))             
    await MessageIn.reply(_TELEGRAM_DP_BROADCASTER_ADDED.format(BroadcasterName))

@TelegramBotDispatcher.message_handler(state=RemBroadcasterForm.BroadcasterNickname)
async def process_name(MessageIn: types.Message, state: FSMContext):
    """
    Process broadcaster name form end(means when user already sended broadcaster's name).
    *Remove following
    """
    logging.info("[pm-handler] Ending 'Remove broadcaster' action --> ID: " + str(MessageIn.from_user.id))             
    await state.finish()
    BroadcasterName = MessageIn.text
    UsersDatabase.RemoveLinkedAccount(MessageIn.from_user.id, BroadcasterName)
    logging.info("[pm-handler] Sending message --> ID: " + str(MessageIn.from_user.id))             
    await MessageIn.answer(_TELEGRAM_DP_BROADCASTER_REMOVED.format(BroadcasterName), reply_markup=types.ReplyKeyboardRemove())

@TelegramBotDispatcher.message_handler(commands=["menu"])
async def Menu(MessageIn : types.Message) -> None:
    """
    Send menu form to the user.
    """
    logging.info("[pm-handler] Sending menu form to --> ID: " + str(MessageIn.from_user.id))             
    await MessageIn.answer(_TELEGRAM_DP_CHOOSE_VARIANT, reply_markup=StartInlineKeyboard)

@TelegramBotDispatcher.message_handler(commands=["start"])
async def Start(MessageIn : types.Message) -> None:
    """
    Send start form to the user.
    """
    logging.info("[pm-handler] Send start form --> ID: " + str(MessageIn.from_user.id))             
    if not UsersDatabase.UsertExists(MessageIn.from_user.id):
        logging.info("[pm-handler] Registered new user --> ID: " + str(MessageIn.from_user.id))             
        UsersDatabase.AddUser(MessageIn.from_user.id)
    logging.info("[pm-handler] Sending message --> ID: " + str(MessageIn.from_user.id))             
    await MessageIn.answer(_TELEGRAM_DP_STARTMESSAGE.format(MessageIn.from_user.first_name), reply_markup=types.ReplyKeyboardRemove())    
    await MessageIn.answer(_TELEGRAM_DP_CHOOSE_VARIANT, reply_markup=StartInlineKeyboard)
